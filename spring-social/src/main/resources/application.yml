spring:
  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: update
    show-sql: true
  datasource:
    username: spring_social_user
    password: FGyGbdZfSciywPm8q1RjXrgZLP6DZ0ha
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://dpg-clvp87ta73kc73bs227g-a.singapore-postgres.render.com:5432/spring_social
  security:
    oauth2:
      client:
        registration:
          google:
            clientId: 1094753135899-ghjvmhdk7onc3flgr8k43sq146qi4jho.apps.googleusercontent.com
            clientSecret: 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
            redirectUri: "{baseUrl}/oauth2/callback/{registrationId}"
            scope:
              - email
              - profile
          github:
            clientId: 4bb60d532188ae74c74c
            clientSecret: 5f5ed910f32d29d6ceac546187994e4397ae5374
            redirectUri: "{baseUrl}/oauth2/callback/{registrationId}"
            scope:
              - user:email
              - read:user

app:
  auth:
    tokenSecret: 04ca023b39512e46d0c2cf4b48d5aac61d34302994c87ed4eff225dcf3b0a218739f3897051a057f9b846a69ea2927a587044164b7bae5e1306219d50b588cb1
    tokenExpirationMsec: 864000000
  cors:
    allowedOrigins: http://localhost:3000,http://localhost:8080,https://atmproject.vercel.app,https://atmgroup4.vercel.app

  oauth2:
    # After successfully authenticating with the OAuth2 Provider,
    # we'll be generating an auth token for the user and sending the token to the
    # redirectUri mentioned by the client in the /oauth2/authorize request.
    authorizedRedirectUris:
      - https://atmproject.vercel.app/oauth2/redirect
      - https://atmgroup4.vercel.app/oauth2/redirect
      - http://localhost:3000/oauth2/redirect
server:
  port: 8080